// Generated by gencpp from file spot_msgs/FootStateArray.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_FOOTSTATEARRAY_H
#define SPOT_MSGS_MESSAGE_FOOTSTATEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/FootState.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct FootStateArray_
{
  typedef FootStateArray_<ContainerAllocator> Type;

  FootStateArray_()
    : states()  {
    }
  FootStateArray_(const ContainerAllocator& _alloc)
    : states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::spot_msgs::FootState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::FootState_<ContainerAllocator> >> _states_type;
  _states_type states;





  typedef boost::shared_ptr< ::spot_msgs::FootStateArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::FootStateArray_<ContainerAllocator> const> ConstPtr;

}; // struct FootStateArray_

typedef ::spot_msgs::FootStateArray_<std::allocator<void> > FootStateArray;

typedef boost::shared_ptr< ::spot_msgs::FootStateArray > FootStateArrayPtr;
typedef boost::shared_ptr< ::spot_msgs::FootStateArray const> FootStateArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::FootStateArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::FootStateArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::FootStateArray_<ContainerAllocator1> & lhs, const ::spot_msgs::FootStateArray_<ContainerAllocator2> & rhs)
{
  return lhs.states == rhs.states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::FootStateArray_<ContainerAllocator1> & lhs, const ::spot_msgs::FootStateArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::FootStateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::FootStateArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::FootStateArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::FootStateArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::FootStateArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::FootStateArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::FootStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bad9df4582060c21e7bde863865e1cb";
  }

  static const char* value(const ::spot_msgs::FootStateArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bad9df4582060c2ULL;
  static const uint64_t static_value2 = 0x1e7bde863865e1cbULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::FootStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/FootStateArray";
  }

  static const char* value(const ::spot_msgs::FootStateArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::FootStateArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FootState[] states\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/FootState\n"
"# Contact\n"
"uint8 CONTACT_UNKNOWN = 0\n"
"uint8 CONTACT_MADE = 1\n"
"uint8 CONTACT_LOST = 2\n"
"\n"
"geometry_msgs/Point foot_position_rt_body\n"
"uint8 contact\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::spot_msgs::FootStateArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::FootStateArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FootStateArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::FootStateArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::FootStateArray_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::FootState_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_FOOTSTATEARRAY_H
