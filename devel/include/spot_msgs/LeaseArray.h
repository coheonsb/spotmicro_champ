// Generated by gencpp from file spot_msgs/LeaseArray.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_LEASEARRAY_H
#define SPOT_MSGS_MESSAGE_LEASEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <spot_msgs/LeaseResource.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct LeaseArray_
{
  typedef LeaseArray_<ContainerAllocator> Type;

  LeaseArray_()
    : resources()  {
    }
  LeaseArray_(const ContainerAllocator& _alloc)
    : resources(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::spot_msgs::LeaseResource_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::spot_msgs::LeaseResource_<ContainerAllocator> >> _resources_type;
  _resources_type resources;





  typedef boost::shared_ptr< ::spot_msgs::LeaseArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::LeaseArray_<ContainerAllocator> const> ConstPtr;

}; // struct LeaseArray_

typedef ::spot_msgs::LeaseArray_<std::allocator<void> > LeaseArray;

typedef boost::shared_ptr< ::spot_msgs::LeaseArray > LeaseArrayPtr;
typedef boost::shared_ptr< ::spot_msgs::LeaseArray const> LeaseArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::LeaseArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::LeaseArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::LeaseArray_<ContainerAllocator1> & lhs, const ::spot_msgs::LeaseArray_<ContainerAllocator2> & rhs)
{
  return lhs.resources == rhs.resources;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::LeaseArray_<ContainerAllocator1> & lhs, const ::spot_msgs::LeaseArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::LeaseArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::LeaseArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::LeaseArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::LeaseArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::LeaseArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::LeaseArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::LeaseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e9c3bf77fbef8b5aa6a3bea6c733c8a";
  }

  static const char* value(const ::spot_msgs::LeaseArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e9c3bf77fbef8b5ULL;
  static const uint64_t static_value2 = 0xaa6a3bea6c733c8aULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::LeaseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/LeaseArray";
  }

  static const char* value(const ::spot_msgs::LeaseArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::LeaseArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LeaseResource[] resources\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/LeaseResource\n"
"string resource\n"
"Lease lease\n"
"LeaseOwner lease_owner\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/Lease\n"
"string resource\n"
"string epoch\n"
"uint32[] sequence\n"
"\n"
"================================================================================\n"
"MSG: spot_msgs/LeaseOwner\n"
"string client_name\n"
"string user_name\n"
;
  }

  static const char* value(const ::spot_msgs::LeaseArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::LeaseArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resources);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LeaseArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::LeaseArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::LeaseArray_<ContainerAllocator>& v)
  {
    s << indent << "resources[]" << std::endl;
    for (size_t i = 0; i < v.resources.size(); ++i)
    {
      s << indent << "  resources[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spot_msgs::LeaseResource_<ContainerAllocator> >::stream(s, indent + "    ", v.resources[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_LEASEARRAY_H
