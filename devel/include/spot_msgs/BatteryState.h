// Generated by gencpp from file spot_msgs/BatteryState.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_BATTERYSTATE_H
#define SPOT_MSGS_MESSAGE_BATTERYSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct BatteryState_
{
  typedef BatteryState_<ContainerAllocator> Type;

  BatteryState_()
    : header()
    , identifier()
    , charge_percentage(0.0)
    , estimated_runtime()
    , current(0.0)
    , voltage(0.0)
    , temperatures()
    , status(0)  {
    }
  BatteryState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , identifier(_alloc)
    , charge_percentage(0.0)
    , estimated_runtime()
    , current(0.0)
    , voltage(0.0)
    , temperatures(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _identifier_type;
  _identifier_type identifier;

   typedef double _charge_percentage_type;
  _charge_percentage_type charge_percentage;

   typedef ros::Duration _estimated_runtime_type;
  _estimated_runtime_type estimated_runtime;

   typedef double _current_type;
  _current_type current;

   typedef double _voltage_type;
  _voltage_type voltage;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _temperatures_type;
  _temperatures_type temperatures;

   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATUS_UNKNOWN)
  #undef STATUS_UNKNOWN
#endif
#if defined(_WIN32) && defined(STATUS_MISSING)
  #undef STATUS_MISSING
#endif
#if defined(_WIN32) && defined(STATUS_CHARGING)
  #undef STATUS_CHARGING
#endif
#if defined(_WIN32) && defined(STATUS_DISCHARGING)
  #undef STATUS_DISCHARGING
#endif
#if defined(_WIN32) && defined(STATUS_BOOTING)
  #undef STATUS_BOOTING
#endif

  enum {
    STATUS_UNKNOWN = 0u,
    STATUS_MISSING = 1u,
    STATUS_CHARGING = 2u,
    STATUS_DISCHARGING = 3u,
    STATUS_BOOTING = 4u,
  };


  typedef boost::shared_ptr< ::spot_msgs::BatteryState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::BatteryState_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryState_

typedef ::spot_msgs::BatteryState_<std::allocator<void> > BatteryState;

typedef boost::shared_ptr< ::spot_msgs::BatteryState > BatteryStatePtr;
typedef boost::shared_ptr< ::spot_msgs::BatteryState const> BatteryStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::BatteryState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::BatteryState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::BatteryState_<ContainerAllocator1> & lhs, const ::spot_msgs::BatteryState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.identifier == rhs.identifier &&
    lhs.charge_percentage == rhs.charge_percentage &&
    lhs.estimated_runtime == rhs.estimated_runtime &&
    lhs.current == rhs.current &&
    lhs.voltage == rhs.voltage &&
    lhs.temperatures == rhs.temperatures &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::BatteryState_<ContainerAllocator1> & lhs, const ::spot_msgs::BatteryState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::BatteryState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::BatteryState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::BatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::BatteryState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::BatteryState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::BatteryState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4f77065e2805bf6a288541cb5a848ce";
  }

  static const char* value(const ::spot_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4f77065e2805bf6ULL;
  static const uint64_t static_value2 = 0xa288541cb5a848ceULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/BatteryState";
  }

  static const char* value(const ::spot_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::BatteryState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status\n"
"uint8 STATUS_UNKNOWN = 0\n"
"uint8 STATUS_MISSING = 1\n"
"uint8 STATUS_CHARGING = 2\n"
"uint8 STATUS_DISCHARGING = 3\n"
"uint8 STATUS_BOOTING = 4\n"
"\n"
"Header header\n"
"string identifier\n"
"float64 charge_percentage\n"
"duration estimated_runtime\n"
"float64 current\n"
"float64 voltage\n"
"float64[] temperatures\n"
"uint8 status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::spot_msgs::BatteryState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::BatteryState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.identifier);
      stream.next(m.charge_percentage);
      stream.next(m.estimated_runtime);
      stream.next(m.current);
      stream.next(m.voltage);
      stream.next(m.temperatures);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::BatteryState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::BatteryState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "identifier: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.identifier);
    s << indent << "charge_percentage: ";
    Printer<double>::stream(s, indent + "  ", v.charge_percentage);
    s << indent << "estimated_runtime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.estimated_runtime);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperatures[]" << std::endl;
    for (size_t i = 0; i < v.temperatures.size(); ++i)
    {
      s << indent << "  temperatures[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.temperatures[i]);
    }
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_BATTERYSTATE_H
