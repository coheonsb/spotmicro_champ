// Generated by gencpp from file spot_msgs/PowerState.msg
// DO NOT EDIT!


#ifndef SPOT_MSGS_MESSAGE_POWERSTATE_H
#define SPOT_MSGS_MESSAGE_POWERSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace spot_msgs
{
template <class ContainerAllocator>
struct PowerState_
{
  typedef PowerState_<ContainerAllocator> Type;

  PowerState_()
    : header()
    , motor_power_state(0)
    , shore_power_state(0)
    , locomotion_charge_percentage(0.0)
    , locomotion_estimated_runtime()  {
    }
  PowerState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motor_power_state(0)
    , shore_power_state(0)
    , locomotion_charge_percentage(0.0)
    , locomotion_estimated_runtime()  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _motor_power_state_type;
  _motor_power_state_type motor_power_state;

   typedef uint8_t _shore_power_state_type;
  _shore_power_state_type shore_power_state;

   typedef double _locomotion_charge_percentage_type;
  _locomotion_charge_percentage_type locomotion_charge_percentage;

   typedef ros::Duration _locomotion_estimated_runtime_type;
  _locomotion_estimated_runtime_type locomotion_estimated_runtime;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATE_UNKNOWN)
  #undef STATE_UNKNOWN
#endif
#if defined(_WIN32) && defined(STATE_OFF)
  #undef STATE_OFF
#endif
#if defined(_WIN32) && defined(STATE_ON)
  #undef STATE_ON
#endif
#if defined(_WIN32) && defined(STATE_POWERING_ON)
  #undef STATE_POWERING_ON
#endif
#if defined(_WIN32) && defined(STATE_POWERING_OFF)
  #undef STATE_POWERING_OFF
#endif
#if defined(_WIN32) && defined(STATE_ERROR)
  #undef STATE_ERROR
#endif
#if defined(_WIN32) && defined(STATE_UNKNOWN_SHORE_POWER)
  #undef STATE_UNKNOWN_SHORE_POWER
#endif
#if defined(_WIN32) && defined(STATE_ON_SHORE_POWER)
  #undef STATE_ON_SHORE_POWER
#endif
#if defined(_WIN32) && defined(STATE_OFF_SHORE_POWER)
  #undef STATE_OFF_SHORE_POWER
#endif

  enum {
    STATE_UNKNOWN = 0u,
    STATE_OFF = 1u,
    STATE_ON = 2u,
    STATE_POWERING_ON = 3u,
    STATE_POWERING_OFF = 4u,
    STATE_ERROR = 5u,
    STATE_UNKNOWN_SHORE_POWER = 0u,
    STATE_ON_SHORE_POWER = 1u,
    STATE_OFF_SHORE_POWER = 2u,
  };


  typedef boost::shared_ptr< ::spot_msgs::PowerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spot_msgs::PowerState_<ContainerAllocator> const> ConstPtr;

}; // struct PowerState_

typedef ::spot_msgs::PowerState_<std::allocator<void> > PowerState;

typedef boost::shared_ptr< ::spot_msgs::PowerState > PowerStatePtr;
typedef boost::shared_ptr< ::spot_msgs::PowerState const> PowerStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spot_msgs::PowerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spot_msgs::PowerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spot_msgs::PowerState_<ContainerAllocator1> & lhs, const ::spot_msgs::PowerState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.motor_power_state == rhs.motor_power_state &&
    lhs.shore_power_state == rhs.shore_power_state &&
    lhs.locomotion_charge_percentage == rhs.locomotion_charge_percentage &&
    lhs.locomotion_estimated_runtime == rhs.locomotion_estimated_runtime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spot_msgs::PowerState_<ContainerAllocator1> & lhs, const ::spot_msgs::PowerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::PowerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spot_msgs::PowerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::PowerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spot_msgs::PowerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::PowerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spot_msgs::PowerState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spot_msgs::PowerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1248df72d2f23288441e3a23d09bd4f0";
  }

  static const char* value(const ::spot_msgs::PowerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1248df72d2f23288ULL;
  static const uint64_t static_value2 = 0x441e3a23d09bd4f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::spot_msgs::PowerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spot_msgs/PowerState";
  }

  static const char* value(const ::spot_msgs::PowerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spot_msgs::PowerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# MotorPowerState\n"
"uint8 STATE_UNKNOWN = 0\n"
"uint8 STATE_OFF = 1\n"
"uint8 STATE_ON = 2\n"
"uint8 STATE_POWERING_ON = 3\n"
"uint8 STATE_POWERING_OFF = 4\n"
"uint8 STATE_ERROR = 5\n"
"\n"
"# ShorePowerState\n"
"uint8 STATE_UNKNOWN_SHORE_POWER = 0\n"
"uint8 STATE_ON_SHORE_POWER = 1\n"
"uint8 STATE_OFF_SHORE_POWER = 2\n"
"\n"
"Header header\n"
"uint8 motor_power_state\n"
"uint8 shore_power_state\n"
"float64 locomotion_charge_percentage\n"
"duration locomotion_estimated_runtime\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::spot_msgs::PowerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spot_msgs::PowerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motor_power_state);
      stream.next(m.shore_power_state);
      stream.next(m.locomotion_charge_percentage);
      stream.next(m.locomotion_estimated_runtime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spot_msgs::PowerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spot_msgs::PowerState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor_power_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_power_state);
    s << indent << "shore_power_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shore_power_state);
    s << indent << "locomotion_charge_percentage: ";
    Printer<double>::stream(s, indent + "  ", v.locomotion_charge_percentage);
    s << indent << "locomotion_estimated_runtime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.locomotion_estimated_runtime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPOT_MSGS_MESSAGE_POWERSTATE_H
