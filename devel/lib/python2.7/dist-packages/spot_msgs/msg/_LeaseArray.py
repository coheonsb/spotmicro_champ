# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spot_msgs/LeaseArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import spot_msgs.msg

class LeaseArray(genpy.Message):
  _md5sum = "1e9c3bf77fbef8b5aa6a3bea6c733c8a"
  _type = "spot_msgs/LeaseArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """LeaseResource[] resources

================================================================================
MSG: spot_msgs/LeaseResource
string resource
Lease lease
LeaseOwner lease_owner

================================================================================
MSG: spot_msgs/Lease
string resource
string epoch
uint32[] sequence

================================================================================
MSG: spot_msgs/LeaseOwner
string client_name
string user_name
"""
  __slots__ = ['resources']
  _slot_types = ['spot_msgs/LeaseResource[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       resources

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LeaseArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.resources is None:
        self.resources = []
    else:
      self.resources = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.resources)
      buff.write(_struct_I.pack(length))
      for val1 in self.resources:
        _x = val1.resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.lease
        _x = _v1.resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v1.epoch
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v1.sequence)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*_v1.sequence))
        _v2 = val1.lease_owner
        _x = _v2.client_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v2.user_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.resources is None:
        self.resources = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resources = []
      for i in range(0, length):
        val1 = spot_msgs.msg.LeaseResource()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.resource = str[start:end]
        _v3 = val1.lease
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.resource = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.epoch = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.epoch = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v3.sequence = s.unpack(str[start:end])
        _v4 = val1.lease_owner
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.client_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.client_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.user_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.user_name = str[start:end]
        self.resources.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.resources)
      buff.write(_struct_I.pack(length))
      for val1 in self.resources:
        _x = val1.resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.lease
        _x = _v5.resource
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v5.epoch
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v5.sequence)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(_v5.sequence.tostring())
        _v6 = val1.lease_owner
        _x = _v6.client_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v6.user_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.resources is None:
        self.resources = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.resources = []
      for i in range(0, length):
        val1 = spot_msgs.msg.LeaseResource()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.resource = str[start:end]
        _v7 = val1.lease
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.resource = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.resource = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.epoch = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.epoch = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        _v7.sequence = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        _v8 = val1.lease_owner
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.client_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.client_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.user_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.user_name = str[start:end]
        self.resources.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
